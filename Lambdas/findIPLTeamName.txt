"""
This sample demonstrates an implementation of the Lex Code Hook Interface
in order to serve a sample bot which manages orders for flowers.
Bot, Intent, and Slot models which are compatible with this sample can be found in the Lex Console
as part of the 'OrderFlowers' template.

For instructions on how to set up and test this bot, as well as additional samples,
visit the Lex Getting Started documentation http://docs.aws.amazon.com/lex/latest/dg/getting-started.html.
"""
import math
import dateutil.parser
import datetime
import time
import json
import os
import decimal
import logging
import boto3
from boto3.dynamodb.conditions import Key, Attr

""" --- Helpers to build responses which match the structure of the necessary dialog actions --- """

#logger = logging.getLogger()
#logger.setLevel(logging.DEBUG)


def get_slots(intent_request):
    return intent_request['currentIntent']['slots']


def elicit_slot(session_attributes, intent_name, slots, slot_to_elicit, message):
    return {
        'sessionAttributes': session_attributes,
        'dialogAction': {
            'type': 'ElicitSlot',
            'intentName': intent_name,
            'slots': slots,
            'slotToElicit': slot_to_elicit,
            'message': message
        }
    }


def close(session_attributes, fulfillment_state, message):
    response = {
        'sessionAttributes': session_attributes,
        'dialogAction': {
            'type': 'Close',
            'fulfillmentState': fulfillment_state,
            'message': message
        }
    }

    return response


def delegate(session_attributes, slots):
    return {
        'sessionAttributes': session_attributes,
        'dialogAction': {
            'type': 'Delegate',
            'slots': slots
        }
    }


""" --- Helper Functions --- """

class DecimalEncoder(json.JSONEncoder):
    def default(self, o):
        if isinstance(o, decimal.Decimal):
            if o % 1 > 0:
                return float(o)
            else:
                return int(o)
        return super(DecimalEncoder, self).default(o)


def parse_int(n):
    try:
        return int(n)
    except ValueError:
        return float('nan')


def build_validation_result(is_valid, violated_slot, message_content):
    if message_content is None:
        return {
            "isValid": is_valid,
            "violatedSlot": violated_slot,
        }

    return {
        'isValid': is_valid,
        'violatedSlot': violated_slot,
        'message': {'contentType': 'PlainText', 'content': message_content}
    }

'''
def isvalid_date(date):
    try:
        dateutil.parser.parse(date)
        return True
    except ValueError:
        return False
'''

def validate_captain_name(captain_name):
    captain_names = ['david miller','mahendra singh dhoni','gautam gambhir','adam gilchrist','shane warne','virat kohli','virender sehwag','sachin tendulkar','rahul dravid','kumar sangakkara','rohit sharma','yuvraj singh','sourav ganguly','george bailey','mahela jayawardene','anil kumble','daniel vettori','shane watson','harbhajan singh','kevin pietersen','david warner','jean paul duminy','brendon mccullum','steve smith','david hussey','cameron white','shikhar dhawan','aaron finch','dinesh karthik','v. v. s. laxman','ricky ponting','angelo mathews','shaun pollock','darren sammy','james hopes','glenn maxwell','suresh raina','dwayne bravo','parthiv patel','ross taylor','zaheer khan']
    if captain_name is not None and captain_name.lower() not in captain_names:
        return build_validation_result(False,
                                       'captains',
                                       '{} never lead any team in IPL'.format(captain_name))

    return build_validation_result(True, None, None)
    
def validate_team_name(team_name):
    team_names = ["mumbai indians","chennai super kings","rajasthan royals",
    "sunrisers hyderabad", "delhi daredevils", "kolkata knight riders","pune warriors india", "kings xi punjab",
    "kochi tuskers", "royal challengers bangalore"];
    if team_name is not None and team_name.lower() not in team_names:
        return build_validation_result(False, "teamNames",
        "{} is not a team in IPL".format(team_name))
        
    return build_validation_result(True, None, None)


""" --- Functions that control the bot's behavior --- """


def find_team(intent_request):
    """
    Performs dialog management and fulfillment for ordering flowers.
    Beyond fulfillment, the implementation of this intent demonstrates the use of the elicitSlot dialog action
    in slot validation and re-prompting.
    """

    captain_name = get_slots(intent_request)["captains"]
    #date = get_slots(intent_request)["PickupDate"]
    #pickup_time = get_slots(intent_request)["PickupTime"]
    source = intent_request['invocationSource']

    #if source == 'DialogCodeHook':
        # Perform basic validation on the supplied input slots.
        # Use the elicitSlot dialog action to re-prompt for the first violation detected.
    slots = get_slots(intent_request)
    validation_result = validate_captain_name(captain_name)
    if not validation_result['isValid']:
        slots[validation_result['violatedSlot']] = None
        return elicit_slot(intent_request['sessionAttributes'],
                           intent_request['currentIntent']['name'],
                           slots,
                           validation_result['violatedSlot'],
                           validation_result['message'])
        # Pass the price of the flowers back through session attributes to be used in various prompts defined
    # on the bot model.
    output_session_attributes = intent_request['sessionAttributes'] if intent_request['sessionAttributes'] is not None else {}
    if captain_name is not None:
        dynamodb = boto3.client('dynamodb')
        iplRecord = dynamodb.get_item(TableName='iplTeamInfo', Key={'captain_name':{'S': captain_name}})
        if iplRecord['Item']['team_name']['S'] is not None:
            team_name = iplRecord['Item']['team_name']['S']
            output_session_attributes['WinPercent'] = iplRecord['Item']['win_percentage']['N']
            output_session_attributes['TeamName'] = team_name
            return close(intent_request['sessionAttributes'],'Fulfilled',{'contentType': 'PlainText','content': 'Hey, {} is leading {} now'.format(captain_name, team_name)})
        else:
            team_name = "No team"
            output_session_attributes['WinPercent'] = "0.0"
            output_session_attributes['TeamName'] = "no team"
            return close(intent_request['sessionAttributes'],'Fulfilled',{'contentType': 'PlainText','content': 'Hey, {} is leading {} now'.format(captain_name, team_name)})
        #return delegate(output_session_attributes, get_slots(intent_request))
    # Order the flowers, and rely on the goodbye message of the bot to define the message to the end user.
# In a real bot, this would likely involve a call to a backend service.
    return close(intent_request['sessionAttributes'],'Fulfilled',{'contentType': 'PlainText','content': 'Hey, {} is leading {} now'.format(captain_name, team_name)})

def find_captain(intent_request):
    team_name = get_slots(intent_request)["TeamName"];
    source = intent_request['invocationSource'];
    slots = get_slots(intent_request)
    validation_result = validate_team_name(team_name)
    if not validation_result['isValid']:
        slots[validation_result['violatedSlot']] = None
        return elicit_slot(intent_request['sessionAttributes'],
                           intent_request['currentIntent']['name'],
                           slots,
                           validation_result['violatedSlot'],
                           validation_result['message'])
    
    output_session_attributes = intent_request['sessionAttributes'] if intent_request['sessionAttributes'] is not None else {}
    if team_name is not None:
        dynamodb = boto3.resource('dynamodb')  
        table = dynamodb.Table('iplTeamInfo')
        fe= Attr('team_name').eq(str(team_name))
        iplRecord = table.scan(FilterExpression = fe)
        iplRecord = json.loads(json.dumps(iplRecord, cls=DecimalEncoder))
        iplRecord = iplRecord['Items'][0];
        if iplRecord['captain_name'] is not None:
            captain_name = iplRecord['captain_name']
            output_session_attributes['WinPercent'] = iplRecord['win_percentage']
            output_session_attributes['captainName'] = captain_name
            return close(intent_request['sessionAttributes'],'Fulfilled',{'contentType': 'PlainText','content': 'Hey, {} is leading {} now'.format(captain_name, team_name)})
        else:
            captain_name = "No captain"
            output_session_attributes['WinPercent'] = "0.0"
            output_session_attributes['captain'] = "no captain"
            return close(intent_request['sessionAttributes'],'Fulfilled',{'contentType': 'PlainText','content': 'Hey, {} is leading {} now'.format(captain_name, team_name)})
    
    return close(intent_request['sessionAttributes'],'Fulfilled',{'contentType': 'PlainText','content': 'Hey, {} is leading {} now'.format(captain_name, team_name)})


def hello_response(intent_request):
    return close(intent_request['sessionAttributes'],'Fulfilled',{'contentType': 'PlainText','content': 'Hi! I can help you with finding out the captains of IPL teams or vice versa.'})

" --- Intents --- """


def dispatch(intent_request):
    """
    Called when the user specifies an intent for this bot.
    """

    #logger.debug('dispatch userId={}, intentName={}'.format(intent_request['userId'], intent_request['currentIntent']['name']))

    intent_name = intent_request['currentIntent']['name']

    # Dispatch to your bot's intent handlers
    if intent_name == 'FindTeam':
        return find_team(intent_request)
        
    if intent_name == 'FindCaptain':
        return find_captain(intent_request)
        
    if intent_name == 'HelloIntent':
        return hello_response(intent_request)

    raise Exception('Intent with name ' + intent_name + ' not supported')


""" --- Main handler --- """


def lambda_handler(event, context):
    """
    Route the incoming request based on intent.
    The JSON body of the request is provided in the event slot.
    """
    # By default, treat the user request as coming from the America/New_York time zone.
    os.environ['TZ'] = 'America/New_York'
    time.tzset()
    #logger.debug('event.bot.name={}'.format(event['bot']['name']))

    return dispatch(event)
